import React, { useState, useEffect } from 'react';
import {
  Hammer,
  GitBranch,
  Upload,
  Download,
  Code,
  Terminal,
  Package,
  Shield,
  Zap,
  Database,
  Network,
  Eye,
  Target,
  Lock,
  Unlock,
  Bug,
  Settings,
  Play,
  Stop,
  RefreshCw,
  CheckCircle,
  AlertTriangle,
  Clock,
  FileText,
  Folder,
  Star,
  Copy,
  Share
} from 'lucide-react';

interface ToolProject {
  id: string;
  name: string;
  description: string;
  category: 'kali-purple' | 'red-team' | 'blue-team' | 'purple-team' | 'forensics' | 'osint' | 'custom';
  language: 'rust' | 'python' | 'go' | 'bash' | 'powershell' | 'javascript' | 'c++';
  framework: 'axum' | 'flask' | 'fastapi' | 'gin' | 'express' | 'native' | 'custom';
  gitRepo: GitRepository;
  codebase: ProjectFile[];
  buildConfig: BuildConfiguration;
  deployment: DeploymentConfig;
  testing: TestConfiguration;
  documentation: DocumentationConfig;
  status: 'planning' | 'development' | 'testing' | 'production' | 'archived';
  lastModified: string;
  contributors: string[];
  version: string;
  license: string;
}

interface GitRepository {
  url: string;
  branch: string;
  lastCommit: string;
  lastPush: string;
  remotes: GitRemote[];
  status: 'clean' | 'dirty' | 'ahead' | 'behind' | 'diverged';
  autoCommit: boolean;
  commitTemplate: string;
}

interface GitRemote {
  name: string;
  url: string;
  type: 'github' | 'gitlab' | 'gitea' | 'custom';
}

interface ProjectFile {
  path: string;
  content: string;
  language: string;
  size: number;
  lastModified: string;
  isExecutable: boolean;
  dependencies: string[];
}

interface BuildConfiguration {
  buildCommand: string;
  testCommand: string;
  packageCommand: string;
  dockerize: boolean;
  artifacts: BuildArtifact[];
  targets: BuildTarget[];
}

interface BuildArtifact {
  name: string;
  path: string;
  type: 'binary' | 'library' | 'docker-image' | 'iso' | 'package';
  size?: string;
}

interface BuildTarget {
  name: string;
  platform: 'linux' | 'windows' | 'macos' | 'all';
  architecture: 'x86_64' | 'arm64' | 'armv7' | 'all';
  optimizations: string[];
}

interface DeploymentConfig {
  method: 'docker' | 'binary' | 'package' | 'iso' | 'script';
  target: 'kali-linux' | 'ubuntu' | 'debian' | 'arch' | 'custom';
  autoUpdate: boolean;
  monitoring: boolean;
  healthCheck: string;
}

interface TestConfiguration {
  framework: string;
  coverage: number;
  autoRun: boolean;
  integrationTests: boolean;
  securityTests: boolean;
}

interface DocumentationConfig {
  format: 'markdown' | 'sphinx' | 'gitbook' | 'custom';
  autoGenerate: boolean;
  apiDocs: boolean;
  examples: boolean;
  tutorials: boolean;
}

interface ToolForgeProps {
  onProjectDeploy?: (project: ToolProject) => void;
}

export const ToolForge: React.FC<ToolForgeProps> = ({
  onProjectDeploy
}) => {
  const [projects, setProjects] = useState<ToolProject[]>([]);
  const [selectedProject, setSelectedProject] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'projects' | 'forge' | 'git' | 'deploy'>('projects');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [newProjectMode, setNewProjectMode] = useState(false);

  useEffect(() => {
    // Initialize with sample tool projects
    setProjects([
      {
        id: 'proj-1',
        name: 'CTAS Purple Defender',
        description: 'Kali Purple defensive cybersecurity monitoring and response tool',
        category: 'kali-purple',
        language: 'rust',
        framework: 'axum',
        gitRepo: {
          url: 'https://github.com/ctas/purple-defender',
          branch: 'main',
          lastCommit: 'feat: Add real-time threat detection',
          lastPush: new Date(Date.now() - 300000).toISOString(),
          remotes: [
            {
              name: 'origin',
              url: 'https://github.com/ctas/purple-defender',
              type: 'github'
            },
            {
              name: 'backup',
              url: 'https://gitlab.com/ctas/purple-defender',
              type: 'gitlab'
            }
          ],
          status: 'clean',
          autoCommit: true,
          commitTemplate: 'feat(${component}): ${description}\n\n🤖 Auto-generated by Tool Forge\n\nCo-authored-by: CTAS-AI <ai@ctas.dev>'
        },
        codebase: [
          {
            path: 'src/main.rs',
            content: `use axum::{routing::get, Router};
use ctas_neural_mux::Client;
use purple_defender::{ThreatDetector, ResponseEngine};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let neural_mux = Client::new("http://localhost:18100").await?;
    let threat_detector = ThreatDetector::new(neural_mux.clone());
    let response_engine = ResponseEngine::new(neural_mux);

    let app = Router::new()
        .route("/health", get(health_check))
        .route("/threats", get(list_threats))
        .route("/respond", post(auto_respond));

    println!("🛡️ CTAS Purple Defender starting on http://localhost:8080");

    let listener = tokio::net::TcpListener::bind("0.0.0.0:8080").await?;
    axum::serve(listener, app).await?;

    Ok(())
}

async fn health_check() -> &'static str {
    "Purple Defender operational"
}`,
            language: 'rust',
            size: 1247,
            lastModified: new Date().toISOString(),
            isExecutable: false,
            dependencies: ['axum', 'tokio', 'serde']
          },
          {
            path: 'Cargo.toml',
            content: `[package]
name = "ctas-purple-defender"
version = "1.0.0"
edition = "2021"
license = "MIT"
description = "Kali Purple defensive cybersecurity tool"

[dependencies]
axum = "0.7"
tokio = { version = "1.0", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
ctas-neural-mux = { path = "../neural-mux" }
reqwest = { version = "0.11", features = ["json"] }
tracing = "0.1"
tracing-subscriber = "0.3"`,
            language: 'toml',
            size: 445,
            lastModified: new Date(Date.now() - 600000).toISOString(),
            isExecutable: false,
            dependencies: []
          },
          {
            path: 'Dockerfile',
            content: `FROM rust:1.75 as builder

WORKDIR /app
COPY . .
RUN cargo build --release

FROM debian:bullseye-slim

RUN apt-get update && apt-get install -y \\
    ca-certificates \\
    && rm -rf /var/lib/apt/lists/*

COPY --from=builder /app/target/release/ctas-purple-defender /usr/local/bin/

EXPOSE 8080
CMD ["ctas-purple-defender"]`,
            language: 'dockerfile',
            size: 389,
            lastModified: new Date(Date.now() - 1200000).toISOString(),
            isExecutable: false,
            dependencies: []
          }
        ],
        buildConfig: {
          buildCommand: 'cargo build --release',
          testCommand: 'cargo test',
          packageCommand: 'cargo package',
          dockerize: true,
          artifacts: [
            {
              name: 'ctas-purple-defender',
              path: 'target/release/ctas-purple-defender',
              type: 'binary',
              size: '4.2 MB'
            },
            {
              name: 'purple-defender-docker',
              path: 'target/docker/ctas-purple-defender:latest',
              type: 'docker-image',
              size: '45 MB'
            }
          ],
          targets: [
            {
              name: 'linux-x86_64',
              platform: 'linux',
              architecture: 'x86_64',
              optimizations: ['lto', 'codegen-units=1']
            },
            {
              name: 'linux-arm64',
              platform: 'linux',
              architecture: 'arm64',
              optimizations: ['lto']
            }
          ]
        },
        deployment: {
          method: 'docker',
          target: 'kali-linux',
          autoUpdate: true,
          monitoring: true,
          healthCheck: '/health'
        },
        testing: {
          framework: 'cargo-test',
          coverage: 87,
          autoRun: true,
          integrationTests: true,
          securityTests: true
        },
        documentation: {
          format: 'markdown',
          autoGenerate: true,
          apiDocs: true,
          examples: true,
          tutorials: true
        },
        status: 'production',
        lastModified: new Date().toISOString(),
        contributors: ['ctas-ai', 'security-team', 'purple-team'],
        version: '1.0.0',
        license: 'MIT'
      },
      {
        id: 'proj-2',
        name: 'OSINT Harvester Pro',
        description: 'Advanced OSINT data collection and analysis platform',
        category: 'osint',
        language: 'python',
        framework: 'fastapi',
        gitRepo: {
          url: 'https://github.com/ctas/osint-harvester',
          branch: 'develop',
          lastCommit: 'refactor: Improve data source reliability',
          lastPush: new Date(Date.now() - 1800000).toISOString(),
          remotes: [
            {
              name: 'origin',
              url: 'https://github.com/ctas/osint-harvester',
              type: 'github'
            }
          ],
          status: 'ahead',
          autoCommit: false,
          commitTemplate: 'feat: ${description}'
        },
        codebase: [
          {
            path: 'main.py',
            content: `#!/usr/bin/env python3
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import asyncio
import aiohttp
from typing import List, Dict, Any
from osint_sources import (
    SocialMediaHarvester,
    DomainIntelligence,
    EmailHarvester,
    PhoneNumberAnalyzer
)

app = FastAPI(title="OSINT Harvester Pro", version="2.0.0")

class OSINTEngine:
    def __init__(self):
        self.social_harvester = SocialMediaHarvester()
        self.domain_intel = DomainIntelligence()
        self.email_harvester = EmailHarvester()
        self.phone_analyzer = PhoneNumberAnalyzer()

    async def comprehensive_search(self, target: str) -> Dict[str, Any]:
        """Perform comprehensive OSINT search on target."""
        results = {}

        # Parallel execution of all OSINT sources
        tasks = [
            self.social_harvester.search(target),
            self.domain_intel.analyze(target),
            self.email_harvester.find_emails(target),
            self.phone_analyzer.analyze(target)
        ]

        social_data, domain_data, email_data, phone_data = await asyncio.gather(*tasks, return_exceptions=True)

        results.update({
            "social_media": social_data if not isinstance(social_data, Exception) else None,
            "domain_intelligence": domain_data if not isinstance(domain_data, Exception) else None,
            "email_addresses": email_data if not isinstance(email_data, Exception) else None,
            "phone_numbers": phone_data if not isinstance(phone_data, Exception) else None,
            "confidence_score": self.calculate_confidence(results),
            "neural_mux_reported": await self.report_to_neural_mux(target, results)
        })

        return results

osint_engine = OSINTEngine()

@app.get("/")
async def root():
    return {"message": "OSINT Harvester Pro - Ready for Intelligence Gathering"}

@app.post("/search/{target}")
async def search_target(target: str):
    try:
        results = await osint_engine.comprehensive_search(target)
        return JSONResponse(content=results)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)`,
            language: 'python',
            size: 2134,
            lastModified: new Date(Date.now() - 3600000).toISOString(),
            isExecutable: true,
            dependencies: ['fastapi', 'aiohttp', 'uvicorn']
          }
        ],
        buildConfig: {
          buildCommand: 'python -m pip install -r requirements.txt',
          testCommand: 'pytest tests/',
          packageCommand: 'python setup.py sdist bdist_wheel',
          dockerize: true,
          artifacts: [
            {
              name: 'osint-harvester-wheel',
              path: 'dist/osint_harvester-2.0.0-py3-none-any.whl',
              type: 'package'
            }
          ],
          targets: [
            {
              name: 'python-universal',
              platform: 'all',
              architecture: 'all',
              optimizations: ['bytecode-optimization']
            }
          ]
        },
        deployment: {
          method: 'docker',
          target: 'kali-linux',
          autoUpdate: false,
          monitoring: true,
          healthCheck: '/'
        },
        testing: {
          framework: 'pytest',
          coverage: 92,
          autoRun: false,
          integrationTests: true,
          securityTests: false
        },
        documentation: {
          format: 'sphinx',
          autoGenerate: false,
          apiDocs: true,
          examples: true,
          tutorials: false
        },
        status: 'development',
        lastModified: new Date(Date.now() - 3600000).toISOString(),
        contributors: ['osint-team', 'data-analysts'],
        version: '2.0.0',
        license: 'GPL-3.0'
      },
      {
        id: 'proj-3',
        name: 'Neural Mux Connector',
        description: 'Universal connector library for Neural Mux integration',
        category: 'custom',
        language: 'rust',
        framework: 'native',
        gitRepo: {
          url: 'https://github.com/ctas/neural-mux-connector',
          branch: 'main',
          lastCommit: 'docs: Update API documentation',
          lastPush: new Date(Date.now() - 600000).toISOString(),
          remotes: [
            {
              name: 'origin',
              url: 'https://github.com/ctas/neural-mux-connector',
              type: 'github'
            }
          ],
          status: 'clean',
          autoCommit: true,
          commitTemplate: 'feat(${component}): ${description}\n\n🔗 Neural Mux Integration\n\nCo-authored-by: Tool-Forge <forge@ctas.dev>'
        },
        codebase: [
          {
            path: 'src/lib.rs',
            content: `//! # Neural Mux Connector
//!
//! Universal library for connecting to the CTAS Neural Mux API gateway.
//! Provides high-level abstractions for service registration, discovery, and communication.

use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use tokio::time::{sleep, Duration};

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceRegistration {
    pub name: String,
    pub port: u16,
    pub capabilities: Vec<String>,
    pub health_endpoint: String,
    pub version: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NeuralMuxResponse<T> {
    pub success: bool,
    pub data: Option<T>,
    pub error: Option<String>,
    pub timestamp: String,
}

pub struct NeuralMuxClient {
    client: Client,
    base_url: String,
    service_id: Option<String>,
}

impl NeuralMuxClient {
    pub fn new(base_url: &str) -> Self {
        Self {
            client: Client::new(),
            base_url: base_url.to_string(),
            service_id: None,
        }
    }

    /// Register this service with Neural Mux
    pub async fn register_service(
        &mut self,
        registration: ServiceRegistration,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let url = format!("{}/api/services/register", self.base_url);

        let response = self
            .client
            .post(&url)
            .json(&registration)
            .send()
            .await?;

        let result: NeuralMuxResponse<String> = response.json().await?;

        if result.success {
            if let Some(service_id) = result.data {
                self.service_id = Some(service_id.clone());
                Ok(service_id)
            } else {
                Err("No service ID returned".into())
            }
        } else {
            Err(result.error.unwrap_or("Registration failed".to_string()).into())
        }
    }

    /// Send data to another service via Neural Mux
    pub async fn send_to_service<T: Serialize>(
        &self,
        target_service: &str,
        endpoint: &str,
        data: &T,
    ) -> Result<serde_json::Value, Box<dyn std::error::Error>> {
        let url = format!("{}/api/route/{}/{}", self.base_url, target_service, endpoint);

        let response = self
            .client
            .post(&url)
            .json(data)
            .send()
            .await?;

        let result: NeuralMuxResponse<serde_json::Value> = response.json().await?;

        if result.success {
            Ok(result.data.unwrap_or(serde_json::Value::Null))
        } else {
            Err(result.error.unwrap_or("Request failed".to_string()).into())
        }
    }

    /// Start heartbeat to Neural Mux
    pub async fn start_heartbeat(&self) -> Result<(), Box<dyn std::error::Error>> {
        let service_id = self.service_id.as_ref()
            .ok_or("Service not registered")?;

        let url = format!("{}/api/services/{}/heartbeat", self.base_url, service_id);

        loop {
            let response = self.client.post(&url).send().await;

            match response {
                Ok(_) => tracing::debug!("Heartbeat sent successfully"),
                Err(e) => tracing::error!("Heartbeat failed: {}", e),
            }

            sleep(Duration::from_secs(30)).await;
        }
    }
}`,
            language: 'rust',
            size: 3245,
            lastModified: new Date(Date.now() - 1800000).toISOString(),
            isExecutable: false,
            dependencies: ['reqwest', 'serde', 'tokio']
          }
        ],
        buildConfig: {
          buildCommand: 'cargo build --release',
          testCommand: 'cargo test',
          packageCommand: 'cargo publish',
          dockerize: false,
          artifacts: [
            {
              name: 'neural-mux-connector',
              path: 'target/release/libneuralconnector.rlib',
              type: 'library'
            }
          ],
          targets: [
            {
              name: 'universal',
              platform: 'all',
              architecture: 'all',
              optimizations: ['lto', 'panic=abort']
            }
          ]
        },
        deployment: {
          method: 'package',
          target: 'custom',
          autoUpdate: true,
          monitoring: false,
          healthCheck: ''
        },
        testing: {
          framework: 'cargo-test',
          coverage: 95,
          autoRun: true,
          integrationTests: true,
          securityTests: true
        },
        documentation: {
          format: 'markdown',
          autoGenerate: true,
          apiDocs: true,
          examples: true,
          tutorials: true
        },
        status: 'production',
        lastModified: new Date(Date.now() - 1800000).toISOString(),
        contributors: ['core-team', 'api-team'],
        version: '1.2.0',
        license: 'MIT'
      }
    ]);
  }, []);

  const filteredProjects = projects.filter(project => {
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         project.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = filterCategory === 'all' || project.category === filterCategory;
    return matchesSearch && matchesCategory;
  });

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'kali-purple': return 'text-purple-400 bg-purple-400/10';
      case 'red-team': return 'text-red-400 bg-red-400/10';
      case 'blue-team': return 'text-blue-400 bg-blue-400/10';
      case 'purple-team': return 'text-indigo-400 bg-indigo-400/10';
      case 'forensics': return 'text-green-400 bg-green-400/10';
      case 'osint': return 'text-yellow-400 bg-yellow-400/10';
      case 'custom': return 'text-cyan-400 bg-cyan-400/10';
      default: return 'text-slate-400 bg-slate-400/10';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'production': return 'text-green-400 bg-green-400/10';
      case 'testing': return 'text-blue-400 bg-blue-400/10';
      case 'development': return 'text-yellow-400 bg-yellow-400/10';
      case 'planning': return 'text-slate-400 bg-slate-400/10';
      case 'archived': return 'text-red-400 bg-red-400/10';
      default: return 'text-slate-400 bg-slate-400/10';
    }
  };

  const getLanguageIcon = (language: string) => {
    switch (language) {
      case 'rust': return <Settings className="w-4 h-4 text-orange-400" />;
      case 'python': return <Code className="w-4 h-4 text-blue-400" />;
      case 'go': return <Zap className="w-4 h-4 text-cyan-400" />;
      case 'javascript': return <Code className="w-4 h-4 text-yellow-400" />;
      case 'bash': return <Terminal className="w-4 h-4 text-green-400" />;
      default: return <Code className="w-4 h-4 text-slate-400" />;
    }
  };

  const pushToGit = async (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    // Simulate Git operations (in real implementation, would use git commands)
    console.log(`Pushing ${project.name} to ${project.gitRepo.url}`);

    // Update project status
    setProjects(prev => prev.map(p =>
      p.id === projectId
        ? {
            ...p,
            gitRepo: {
              ...p.gitRepo,
              lastPush: new Date().toISOString(),
              status: 'clean'
            }
          }
        : p
    ));
  };

  const deployProject = async (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    onProjectDeploy?.(project);
  };

  const tabs = [
    { id: 'projects', label: 'Projects', icon: Folder },
    { id: 'forge', label: 'Tool Forge', icon: Hammer },
    { id: 'git', label: 'Git Operations', icon: GitBranch },
    { id: 'deploy', label: 'Deployment', icon: Upload }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-slate-800 border border-cyan-400/20 rounded-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <Hammer className="w-6 h-6 text-orange-400" />
            <h2 className="text-xl font-semibold text-slate-100">Tool Forge</h2>
            <span className="px-3 py-1 bg-orange-400/10 text-orange-400 rounded-full text-sm">
              Git-Integrated Development
            </span>
          </div>

          <div className="flex items-center space-x-3">
            <button
              onClick={() => setNewProjectMode(true)}
              className="flex items-center space-x-2 px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-md transition-colors"
            >
              <Hammer className="w-4 h-4" />
              <span>New Project</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors">
              <GitBranch className="w-4 h-4" />
              <span>Clone Repo</span>
            </button>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-slate-700 rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Folder className="w-5 h-5 text-blue-400" />
              <span className="text-sm text-slate-300">Active Projects</span>
            </div>
            <div className="text-2xl font-bold text-blue-400">{projects.length}</div>
          </div>

          <div className="bg-slate-700 rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <GitBranch className="w-5 h-5 text-green-400" />
              <span className="text-sm text-slate-300">Git Repos</span>
            </div>
            <div className="text-2xl font-bold text-green-400">
              {projects.filter(p => p.gitRepo.status === 'clean').length}
            </div>
          </div>

          <div className="bg-slate-700 rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Upload className="w-5 h-5 text-purple-400" />
              <span className="text-sm text-slate-300">Deployed</span>
            </div>
            <div className="text-2xl font-bold text-purple-400">
              {projects.filter(p => p.status === 'production').length}
            </div>
          </div>

          <div className="bg-slate-700 rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Star className="w-5 h-5 text-yellow-400" />
              <span className="text-sm text-slate-300">Kali Purple</span>
            </div>
            <div className="text-2xl font-bold text-yellow-400">
              {projects.filter(p => p.category === 'kali-purple').length}
            </div>
          </div>
        </div>

        {/* Search and Filters */}
        <div className="flex items-center space-x-4 mb-4">
          <div className="flex-1 relative">
            <Code className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search projects, tools, or repositories..."
              className="w-full pl-10 pr-4 py-2 bg-slate-700 border border-slate-600 rounded-md text-slate-100 placeholder-slate-400 focus:border-orange-400 focus:outline-none"
            />
          </div>

          <select
            value={filterCategory}
            onChange={(e) => setFilterCategory(e.target.value)}
            className="px-3 py-2 bg-slate-700 border border-slate-600 rounded-md text-slate-100 focus:border-orange-400 focus:outline-none"
          >
            <option value="all">All Categories</option>
            <option value="kali-purple">Kali Purple</option>
            <option value="red-team">Red Team</option>
            <option value="blue-team">Blue Team</option>
            <option value="purple-team">Purple Team</option>
            <option value="forensics">Forensics</option>
            <option value="osint">OSINT</option>
            <option value="custom">Custom</option>
          </select>
        </div>

        {/* Navigation Tabs */}
        <nav className="flex space-x-1">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                  activeTab === tab.id
                    ? 'bg-orange-600 text-white'
                    : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700'
                }`}
              >
                <Icon size={16} />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'projects' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Project List */}
          <div className="lg:col-span-2 space-y-4">
            {filteredProjects.map((project) => (
              <div
                key={project.id}
                className={`bg-slate-700 border rounded-lg p-4 cursor-pointer transition-colors ${
                  selectedProject === project.id ? 'border-orange-400' : 'border-slate-600 hover:border-slate-500'
                }`}
                onClick={() => setSelectedProject(project.id)}
              >
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-start space-x-3">
                    <div className="flex items-center space-x-2">
                      {getLanguageIcon(project.language)}
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(project.category)}`}>
                        {project.category.toUpperCase()}
                      </span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`}>
                        {project.status.toUpperCase()}
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        pushToGit(project.id);
                      }}
                      className="p-1 text-green-400 hover:bg-green-400/10 rounded"
                    >
                      <GitBranch className="w-4 h-4" />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deployProject(project.id);
                      }}
                      className="p-1 text-blue-400 hover:bg-blue-400/10 rounded"
                    >
                      <Upload className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                <div className="mb-3">
                  <h3 className="text-slate-100 font-medium">{project.name}</h3>
                  <p className="text-slate-400 text-sm">{project.description}</p>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                  <div>
                    <span className="text-slate-400">Language:</span>
                    <span className="text-slate-200 ml-2 capitalize">{project.language}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Framework:</span>
                    <span className="text-slate-200 ml-2">{project.framework}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Version:</span>
                    <span className="text-slate-200 ml-2">{project.version}</span>
                  </div>
                  <div>
                    <span className="text-slate-400">Git Status:</span>
                    <span className={`ml-2 ${
                      project.gitRepo.status === 'clean' ? 'text-green-400' :
                      project.gitRepo.status === 'ahead' ? 'text-blue-400' :
                      'text-yellow-400'
                    }`}>
                      {project.gitRepo.status}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Project Details */}
          <div className="bg-slate-700 rounded-lg p-4">
            <h3 className="text-lg font-semibold text-slate-100 mb-4">Project Details</h3>
            {selectedProject ? (
              <div>
                {(() => {
                  const project = projects.find(p => p.id === selectedProject);
                  if (!project) return null;

                  return (
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-slate-300 font-medium mb-2">{project.name}</h4>
                        <p className="text-slate-400 text-sm mb-3">{project.description}</p>
                      </div>

                      <div>
                        <h4 className="text-slate-300 font-medium mb-2">Git Repository</h4>
                        <div className="bg-slate-800 rounded p-3 text-sm">
                          <div className="flex justify-between mb-1">
                            <span className="text-slate-400">URL:</span>
                            <span className="text-cyan-400 text-xs">{project.gitRepo.url}</span>
                          </div>
                          <div className="flex justify-between mb-1">
                            <span className="text-slate-400">Branch:</span>
                            <span className="text-slate-200">{project.gitRepo.branch}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-slate-400">Last Push:</span>
                            <span className="text-slate-200">{new Date(project.gitRepo.lastPush).toLocaleDateString()}</span>
                          </div>
                        </div>
                      </div>

                      <div>
                        <h4 className="text-slate-300 font-medium mb-2">Build Artifacts ({project.buildConfig.artifacts.length})</h4>
                        <div className="space-y-1">
                          {project.buildConfig.artifacts.map((artifact, index) => (
                            <div key={index} className="bg-slate-800 rounded p-2 text-sm">
                              <div className="flex justify-between">
                                <span className="text-slate-200">{artifact.name}</span>
                                <span className="text-slate-400 text-xs">{artifact.size}</span>
                              </div>
                              <div className="text-slate-400 text-xs">{artifact.type}</div>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="space-y-2">
                        <button className="w-full px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded text-sm transition-colors">
                          Open in Editor
                        </button>
                        <button
                          onClick={() => pushToGit(project.id)}
                          className="w-full px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors"
                        >
                          Push to Git
                        </button>
                        <button
                          onClick={() => deployProject(project.id)}
                          className="w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
                        >
                          Deploy Project
                        </button>
                      </div>
                    </div>
                  );
                })()}
              </div>
            ) : (
              <p className="text-slate-400">Select a project to view details</p>
            )}
          </div>
        </div>
      )}

      {activeTab === 'git' && (
        <div className="space-y-6">
          <div className="bg-slate-700 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-slate-100 mb-6">Git Operations</h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="bg-slate-800 rounded p-4">
                  <h4 className="text-slate-200 font-medium mb-3">Repository Status</h4>
                  <div className="space-y-2">
                    {projects.map((project) => (
                      <div key={project.id} className="flex items-center justify-between p-2 bg-slate-700 rounded">
                        <span className="text-slate-300 text-sm">{project.name}</span>
                        <span className={`text-xs px-2 py-1 rounded ${
                          project.gitRepo.status === 'clean' ? 'bg-green-400/10 text-green-400' :
                          project.gitRepo.status === 'ahead' ? 'bg-blue-400/10 text-blue-400' :
                          'bg-yellow-400/10 text-yellow-400'
                        }`}>
                          {project.gitRepo.status}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-slate-800 rounded p-4">
                  <h4 className="text-slate-200 font-medium mb-3">Quick Actions</h4>
                  <div className="space-y-2">
                    <button className="w-full px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-sm transition-colors">
                      Push All Projects
                    </button>
                    <button className="w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors">
                      Pull All Repos
                    </button>
                    <button className="w-full px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded text-sm transition-colors">
                      Sync with Remotes
                    </button>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="bg-slate-800 rounded p-4">
                  <h4 className="text-slate-200 font-medium mb-3">Recent Commits</h4>
                  <div className="space-y-2 text-sm">
                    {projects.map((project) => (
                      <div key={project.id} className="p-2 bg-slate-700 rounded">
                        <div className="text-slate-200 font-mono text-xs">{project.gitRepo.lastCommit}</div>
                        <div className="text-slate-400 text-xs">{project.name}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-slate-800 rounded p-4">
                  <h4 className="text-slate-200 font-medium mb-3">Auto-Commit Settings</h4>
                  <div className="space-y-3">
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="rounded" defaultChecked />
                      <span className="text-slate-300 text-sm">Enable auto-commit</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="rounded" defaultChecked />
                      <span className="text-slate-300 text-sm">Auto-push to remote</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="rounded" />
                      <span className="text-slate-300 text-sm">Create release tags</span>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};